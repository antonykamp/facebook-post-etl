import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import json
from datetime import datetime, timedelta
import pandas as pd

plt.rcParams.update({"font.size": 15})

with open("scraped_3000.json", "r") as f:
    data = json.load(f)
    posts = data["data"]

filtered_posts = [
    "1630596215-4605517002811936",
    "1630596215-4605517002811936",
    "1630669193-4608152389215064",
    "1630669193-4608152389215064",
    "1630692050-4609269155770054",
    "1630692050-4609269155770054",
    "1631004126-4620151484681821",
    "1631282437-4630280183668951",
    "1631282437-4630280183668951",
    "1631302432-4631146290249007",
    "1631688990-4645066212190348",
    "1631688990-4645066212190348",
    "1631700341-4645448802152089",
    "1631807552-4649522458411390",
    "1632056444-4652380351458934",
    "1632056444-4652380351458934",
    "1632990901-4652162628147373",
    "1633341816-4707607599269542",
    "1633514833-4713019825394986",
    "1633514833-4713019825394986",
    "1634310005-4742428145787487",
    "1634378429-4745104765519825",
    "1634378429-4745104765519825",
    "1634397781-4745934728770162",
    "1634742026-4757642730932695",
    "1634814916-4760532993977002",
    "1634828445-4760566427306992",
    "1634828445-4760566427306992",
    "1634900036-4763571190339849",
    "1635243476-4775582565805378",
    "1635243476-4775582565805378",
    "1635269407-4776313939065574",
    "1635503770-4785797744783860",
    "1635588118-4788991944464440",
    "1635597001-4786410541389247",
    "1636196420-4810952625601705",
    "1636446648-4798864030143898",
    "1636916401-4830887576941543",
    "1636916401-4830887576941543",
    "1637158225-4847012775329023",
    "1637433004-4854223637941270",
    "1637433004-4854223637941270",
    "1637602203-4863689640328003",
    "1637602203-4863689640328003",
    "1638101220-4877772745586359",
    "1638968401-4916329048397395",
    "1639317300-4923471191016514",
    "1639317300-4923471191016514",
    "1639467431-4935504409813192",
    "1639570200-4939262676104032",
    "1639570200-4939262676104032",
    "1640860620-5002004949829804",
    "1640860620-5002004949829804",
    "1641216202-5017389054958060",
    "1641216202-5017389054958060",
    "1641494145-5027361217294177",
    "1641542404-5023036637726635",
    "1641652200-5023362237694075",
    "1641652200-5023362237694075",
    "1641916500-5040964209267211",
    "1641916500-5040964209267211",
    "1643439601-5096711370359161",
    "1643558401-5116199065077058",
    "1643965200-5128899520473679",
    "1644569445-5161036267260004",
    "1644569445-5161036267260004",
    "1644649201-5129036290460002",
    "1645031700-5177926265571004",
    "1645031700-5177926265571004",
    "1645282800-5183832968313667",
    "1645819214-5205794709450826",
    "1646071214-5214459301917700",
    "1646071214-5214459301917700",
    "1646672100-5233929333304030",
    "1646747700-5236314163065547",
    "1646747700-5236314163065547",
    "1646747700-5236314163065547",
    "1646916902-5242111719152458",
    "1646927702-5242433202453643",
    "1647010800-5244859978877632",
    "1647172800-5245608628802767",
    "1647284100-5253309444699352",
    "1647514639-5261096247254005",
    "1647624600-5263859693644327",
    "1647702000-5245063298857300",
    "1647895072-5272710212759275",
    "1647961201-5274510002579296",
    "1648036801-5276510755712554",
    "1648047600-5276537095709920",
    "1648047600-5276537095709920",
    "1648120215-5279292625434367",
    "1648554460-5292701147426848",
    "1648580427-5292637814099848",
    "1648580427-5292637814099848",
    "1648634401-5272074322822864",
    "1648643283-5295434550486841",
    "1648643283-5295434550486841",
    "1648719634-5297802183583411",
    "1648719634-5297802183583411",
    "1648731603-5298111353552494",
    "1648731603-5298111353552494",
    "1648731603-5298111353552494",
    "1650006000-5327427793954183",
    "1650117600-5332340606796235",
    "1650265201-5319184861445143",
    "1650431263-5349902698373359",
    "1650543547-5353256688037960",
    "1650639602-5355950941101868",
    "1650693601-5355601087803520",
    "1650898829-508250980755353",
    "1650969002-5366181500078812",
    "1650999601-5353334338030195",
    "1651071600-5369353426428286",
    "1651222491-5374452499251712",
    "1651237118-5374913692538926",
    "1651753801-5391026074261021",
    "1651939201-5393723207324641",
    "1652092936-5402347269795568",
    "1652092936-5402347269795568",
    "1652108400-5402442919786003",
    "1652361109-5411183832245245",
    "1652361109-5411183832245245",
    "1652594401-5408384465858515",
    "1652594401-5408384465858515",
    "1652976001-5431721146858180",
    "1653055201-5431510150212613",
    "1653069600-5431458683551093",
    "1653069600-5431458683551093",
    "1653141600-5431420746888220",
    "1653228000-5422765814420380",
    "1653390005-5443800088983619",
    "1653390005-5443800088983619",
    "1653917400-5465030506860577",
    "1654001115-5467959719900989",
    "1654085209-5470818722948422",
    "1654516802-5476659049031056",
    "1654608178-5487801004583527",
    "1654608178-5487801004583527",
    "1654608178-5487801004583527",
    "1654628421-5487942134569414",
    "1654628421-5487942134569414",
    "1654753197-5490624747634486",
    "1654753197-5490624747634486",
    "1654785942-5494264190603875",
    "1654860723-5496309617065999",
    "1655019042-5496324023731225",
    "1655301604-5510026055694355",
    "1655364600-5510103969019897",
    "1655487731-5516914365005524",
    "1655487731-5516914365005524",
    "1655838590-5528561083840852",
    "1655906026-5530669643629996",
    "1655915342-5531109410252686",
    "1655991129-5533349486695345",
    "1655991129-5533349486695345",
    "1656001819-5530372256993068",
    "1656074975-5536301663066794",
    "1656074975-5536301663066794",
    "1656163851-5536039369759690",
    "1656741600-5553633264666967",
    "1656942902-5564198110277149",
    "1656957302-5564891110207849",
    "1657000500-5564581840238776",
    "1657028517-5567021459994814",
    "1657094587-5569244499772510",
    "1657108963-5569714239725536",
    "1657191601-5572251826138444",
    "1657216802-5572737099423250",
    "1657542602-5582700538426906",
    "1657542602-5582700538426906",
    "1657553401-5582750978421862",
    "1657613160-5585137771516516",
    "1657623901-5585449738151986",
    "1657812851-5592721314091495",
    "1657812851-5592721314091495",
    "1657866270-5594692510561042",
    "1657866270-5594692510561042",
    "1657969202-5595480437148916",
    "1658041200-5595520510478242",
    "1658296801-5607607952602831",
    "1658307787-5609792922384334",
    "1658307787-5609792922384334",
    "1658390325-5612543275442632",
    "1658469789-5615023285194631",
    "1658562735-5617840864912873",
    "1658641904-5620250728005220",
    "1658826396-5625679770795649",
    "1658995184-5630791643617795",
    "1659080559-5633392120024414",
    "1659100084-5634040463292913",
    "1659174903-5634101376620155",
    "1659250804-5638683632828596",
    "1659276631-5639508836079409",
    "1659345889-5641636599199966",
    "1659705214-5653451061351853",
    "1659853610-5657935140903445",
    "1660402727-5675350439161915",
    "1660548429-5680022188694740",
    "1660548429-5680022188694740",
    "1660548429-5680022188694740",
    "1660630844-5682677641762528",
    "1660909974-5692045564159069",
    "1661179515-5701063509923941",
    "1661433393-5709127475784211",
    "1661455328-5709896192374006",
    "1662040802-5728696193827339",
]

search_token = [
    "klima",
    "umwelt",
    "natur",
    "heimat",
    "energie",
    "solar",
    "auto",
    "wirtschaft",
    "bio",
    "Windrad",
    "windräder",
    "wasserstoff",
    "kernkraft",
    "atomkraft",
    "erwärmung",
    "eike",
    "fridays for future",
    "fff",
    "e-auto",
    "verbrennermotor",
    "nahverkehr",
    "heinzung",
    "pariser klimaabkommen",
    "strom",
    "bio",
    "tier",
]
relevant_posts = [
    post
    for post in posts
    if post["text"] is not None
    and f"{str(post['timestamp'])}-{str(post['post_id'])}" in filtered_posts
    and any(word.lower() in post["text"].lower() for word in search_token)
    and post["timestamp"] > datetime(2021, 9, 1).timestamp()
    and post["timestamp"] < datetime(2022, 8, 31).timestamp()
]
relevant_posts.reverse()
print(len(relevant_posts))
with open("relevant_posts.json", "w") as f:
    json.dump(relevant_posts, f)


timestamps = [post["timestamp"] for post in relevant_posts]
dates = [datetime.fromtimestamp(ts) for ts in timestamps]

months_string = [f"{date.month}. {date.year}" for date in dates]
list_months = sorted(set(months_string), key=months_string.index)
num_months = len(list_months)

df = pd.DataFrame(dates, columns=["date"])

ax = (
    df.groupby([df["date"].dt.year, df["date"].dt.month])
    .count()
    .plot(
        kind="barh",
        figsize=(10, 5),
        # title='Verteilung der Beitrage "Economic Decline Frame"',
        xlabel="Anzahl an Beiträgen",
        ylabel="Monat",
    )
)


ax.locator_params(axis="y", nbins=num_months)
ax.set_yticklabels(list_months)

# ax.set_xlabel("Monat")
# ax.set_ylabel("Anzahl an Beiträgen")
# ax.set_title("Anzahl an gefilterten Beiträgen pro Monat")

# ax.legend(["Gefilterte Beiträge"])
ax.invert_yaxis()
plt.bar_label(ax.containers[0], fmt=" (%d)", label_type="edge")
ax.margins(x=0.1)

ax.get_legend().remove()
# TODO: add title
# TODO: change legend
# plt.subplots_adjust(bottom=0.2)
plt.show()
